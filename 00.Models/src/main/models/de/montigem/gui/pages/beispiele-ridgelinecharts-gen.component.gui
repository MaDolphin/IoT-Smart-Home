webpage RidgelineChartSamplePage(
    socket RidgelineChartData chartData1,
    all RidgelineChartData chartData
) {  // webpage declaration with data init
  column(nospace) {
      navigation "navigationBarLinks" {
          tab "Info" {
              link: "../charts"
          }
          tab "Density & Gauge Charts" {
            link: "../density_gauge_dashboard"
          }
          tab "BarCharts" {
              link: "../barcharts"
          }
          tab "Heatmap" {
              link: "../heatmapcharts"
          }
          tab "GaugeCharts" {
            link: "../gaugecharts"
          }
          tab "HorizontalBarCharts" {
              link: "../horizontalbarcharts"
          }
          tab "TimeLineCharts" {
              link: "../timelinecharts/1"
          }
          tab "PieCharts" {
            link: "../piecharts/1"
          }
          tab "DensityChart" {
            link: "../densitycharts"
          }
          tab "Ridgeline" {
            link: "./"
          }
      }
  }

  row (space-evenly, spaceabove) {
    container(90%) {
      card {
          head{
              row(stretch) {
                  label "Explanation"
              }
          }
          body {
              row {
                  textoutput {
                      "On the left side you can see a dynamic plot. The intention of this plot is not to show the communication with the Backend. Instead, the focus lies on demonstrating the real-time capabilities of the RidgelineChartComponent. As a consequence the data for this plot is not sent from the backend, but generated in beispiele-ridgelinecharts-gen.component.ts. However, it also indicates a proper functioning of the socket-architecture, because each time a message is received a new value of the generated data is added to the plot-data, i.e., the socket-architecture works as pulsing."
                  }
              }
              row {
                  textoutput {
                      "In order to activate the plot on the right side, you need to add data to the Backend by executing 07.Scripts/Tools/DataGeneratorStaticRidgeline.py. This plot indicates that RidgelineCharts can be used for various purposes, e.g., it shows the trend of the data of one fictitious temperature sensor over several days."
                  }
              }
          }
      }
    }
  }

  row (space-evenly, spaceabove) {

    // Dynamic ridgeline plot
    container(40%) {
        card {
            head {
                label "Ridgeline Chart Dynamic"
            }
            body {
              html {"
                <form [formGroup]='' style='position:relative;left:0px;top:0px;'>
                  <label for='gradient_test'>Add color stop (at least two required): </label>
                  <!-- Color stop y-value -->
                  <input #box [value]='0.3' (keydown.enter)='ignore_keydown($event)' id='color_stop_y_input'/>
                  <!-- Selector for color stop color -->
                  <div class='color-picker' height='10px' style='display:inline-block'>
                    <button class='closed' [ngStyle]=\"{'background': selected_color}\" (click)='toggle_color_picker($event)'>Color</button>
                    <div class='opened' style='position: absolute; box-shadow: 0px 7px 12px 0px rgba(53, 53, 53, 0.2); padding:1px' *ngIf='show_color_picker'>
                      <p>Enter hex color:</p>
                      <div class='hex-color-input'>
                        <input #color_input type='text' maxlength='7' [value]='selected_color' (keydown.enter)='ignore_keydown($event)' (keyup.enter)='change_color($event, color_input.value)' />
                      </div>
                    </div>
                  </div>
                  <!-- Add and reset buttons for gradient colors -->
                  <button id='gradient_add' (click)='add_color_stop($event)'>Add</button>
                  <button id='gradient_reset' (click)='reset_color_stop($event)'>Reset</button>
                </form>
                <ridgeline-chart
                  [alpha]=0.2
                  [overshoot]=30
                  [raw_data]=data_dynamic
                  [overwrite_data]=\"false\"
                  [labels]=labels_dynamic
                  [font_size]=12
                  [color_gradients]=color_gradients_dynamic
                  [x_is_time]=\"false\"
                  [show_date]=\"false\"
                  [align_x_label_to]=5
                  [max_x_range]=10
                  [relative_x_precision]=1>
                </ridgeline-chart>
              "}
            }
        }
    }
  
    // Static ridgeline plot
    container(40%) {
        card {
            head {
                label "Ridgeline Chart Static"
            }
            body {
              html {"
                <ridgeline-chart
                  [alpha]=0.8
                  [overshoot]=30
                  [raw_data]=data_static
                  [overwrite_data]=\"true\"
                  [labels]=labels_static
                  [font_size]=12
                  [color_gradients]=color_gradients_static
                  [x_is_time]=\"true\"
                  [show_date]=\"false\"
                  [align_x_label_to]=14400000>
                </ridgeline-chart>
              "}
            }
        }
    }
  }

}
