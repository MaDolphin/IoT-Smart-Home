/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

// Ticket #928(fixed)

package testmodels.correct;

import java.lang.Integer;
import java.lang.String;

classdiagram AssociationsToOrFromInterface {

  interface InterfacePerson;
  
  + abstract class Person implements InterfacePerson {
      String name;
      String firstname;
      String thisIsAVeryVeryLongAttributeName;
  }
  
  class Student extends Person {
    Integer matrNumber;
    int semester;
  }
  
  class AStudent extends Student {
    double gradePointAverage;
  }
  
  class Professor extends Person;
  
  class Assistant extends Person;
  
  class Address {
    String country;
    String street;
    String city;
  }
  
  <<observable>> class Lecture {
    //java.lang.String name;
    String name;
  }
  
  enum Degree { MASTER, BACHELOR; }
  
  class Schedule{
    // Semester semester;
  }
  
  class Semester {
    String startOfLectures;
    String endOfLectures;
  }
  
  class Room {
    int number;
  }
  
  class LectureHall extends Room;
  
  class SeminarRoom extends Room;
  
  association [*] InterfacePerson -> Address [1];
  association [*] InterfacePerson <- Room [1..*];
  association [1] InterfacePerson <-> Lecture [*] <<ordered>>;
  
}
