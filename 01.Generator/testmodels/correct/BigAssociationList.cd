/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

// Various variants of associations
// Source 1: The grammar
//  
//    CDAssociation = Stereotype?
//      (   association:["association"]
//        | composition:["composition"])                2*
//      (derived:[DERIVED:"/"])?  Name?                 2*  2*
//      leftModifier:Modifier?                          
//      leftCardinality:Cardinality?                    8*
//      leftReferenceName:QualifiedName                 3*
//      ("[" leftQualifier:CDQualifier "]")?            3*
//      ("(" leftRole:Name ")")?                        2*
//      (   leftToRight:["->"]                          4*
//        | rightToLeft:["<-"]
//        | bidirectional:["<->"]
//        | simple:["--"] )
//      ("(" rightRole:Name ")")?                       2*
//      ("[" rightQualifier:CDQualifier "]")?           3*
//      rightReferenceName:QualifiedName                3*
//      rightCardinality:Cardinality?                   8*
//      rightModifier:Modifier ";" ;                    
//  
//    Modifier = Stereotype?
//      (   abstract:["abstract"]
//        | derived:["derived"] | derived:[DERIVED:"/"] )*;
//  
//    Cardinality =                                     4
//      "[" ( many:[foo:"*"]
//            | lowerBoundLit:IntLiteral
//              (".." (upperBoundLit:IntLiteral | noUpperLimit:["*"]) )?
//      )"]";
//                          [*]  [5]  [0..*]  [0..7]  [1..*]   [1..8]  [3..6]
//
// Analysis of special cases:
// a) self referencial (On classes)
// b) qualfied self referencial (same attribute)
// c) Sources for classes and interfaces: e.g. external, internal
//
//
// Reduktion auf interessante Varianten:
// Jede Variante einmal austesten ~ 8 Varianten (maximum)
// 

package testmodels.correct; // CP Associations

classdiagram BiGAssociationList {

class C1, C2, C3;
abstract class A, A1, A2, A3; 
interface I, I1, I2, I3;

class C implements C1 { String s; int i; boolean b; Optional<int> o; List<String> l; }

abstract class Cy { String ys; int yi; boolean yb; Optional<int> yo; List<String> yl; }

// -----------------
// Each concept once:

association / as1 [1..*] C [[ys]] (crole) <-> (cyrole) [[int]] Cy [3..5];

association C3 -> C2 [*];

association [5] C (crole3) <- (cyrole3) [[boolean]] Cy [0..*];

composition as4 [1..8] C [[yo]] (crole4) -- Cy [0..7];

// -----------------
// Special combinations:

// card. larger than one: (How to instantiate?)
association as10 [3..5] C <-> Cy [4..7];

// self referential
association as11 C (crole11) <-> (crole11b) C;

composition as12 C (crole12) -- (crole12b) C;

// selfreferential to superclass:
association as13 C (crole13) <-> (crole13b) C1;

// ref. to external class
association as14 C [[int]] --> String [*];

association as15 C [[int]] --> String [1];

association as16 C [[int]] --> String ;

// -----------------
// These are good examples only.
/7 Where do we put the bad examples that should be rejected ...?

}

Übereinstimmungen in Binärdatei (Standardeingabe)
