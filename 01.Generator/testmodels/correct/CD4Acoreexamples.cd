/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package testmodels.correct;

classdiagram CD4Acoreexamples {

  class Address;
  class Car;
  class Profile;
  class Person extends Profile {
    // ...
    String profileName;
    String firstName;
    // ...
  }
  class Group;
  
  association member [*] Person <-> Group [*];

  interface IfB;
  interface IfC;
  interface IfD;
  

  interface IfA extends IfB, IfC, IfD;
  class Ee extends F implements IfA, IfC;
  abstract class F;

  class X1 {
    Address a;
    String city;
    / int age;
    boolean member = false;
    String msg = "Welcome.";
    Optional<Car> myCar;
    List<Address> places;
    Set<int> lottoNrs;
  }

  association g1 A -> B;  // left to right
  association g2 A <- B;  // right to left
  association g3 A <-> B; // bidirectional
  association g4 A -- B;  // unspecified directions
  association / g5 A -> B;

  association [1] Person (organizer) <-
                         (organized) [[profileName]] Group [*];
  association [1] Person <- [String] Group [*];

  association g6 <<ordered>> A -- B <<ordered>>;
  
  class C1;
  class C2;
  class C3;
  class A;
  class B{
    String theQualfier;
  }

  composition c1 A  -> B;
  composition c2 A <-> B [*];
  composition c3 A [[theQualfier]] -- B [1];
  composition c4 A -- B [*] <<ordered>>;
  composition c5 A -> B [1..*];

  class Post; 

  association received [*] Profile -> Post [*] <<ordered>>;

  association sent [1] Profile <-> Post [*] <<ordered>>;
}
