/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

// Ticket 523(fixed), 524(fixed), 526(fixed)

package testmodels.correct; // JOR CD2Alloy1_noOCL

import java.util.Date;

classdiagram CD2Alloy1_noOCL {

  enum ColorKind {black,red,white;}

  enum CarKind { sportsCar, van, limousine, regular;}

  enum InsuranceKind {workAccident, transportation, international;}

  enum DrivingExperience {expert, beginner;}

  class Employee;

  class Driver extends Employee {
    DrivingExperience drivingExperience;
  }

  class Address;

  abstract class Vehicle {
    Date registrationDate;
    String licensePlate;
  }

  class Car extends Vehicle {
    ColorKind color;
    CarKind kind;
  }

  class Truck extends Vehicle;

  // maybe put singleton here later for refinement
  class Company {}

  class License {}

  class Insurance {
    InsuranceKind kind;
  }
  // fix it
  //association Driver -> (birthDay) Date [1];

  association driving [1] Driver (drivenBy) -- (drives) Vehicle [1];

  association workPlace [1] Employee (of) -> (worksIn) Address [1..*]; //[1..3];

  association companiesCars [0..1] Company (of) -> (cars) Car [*];

  association companiessEmps [*] Company (of) -> (emps) Employee [*];

  composition employeeInsurances [1] Employee (of) -> (insurances) Insurance [1];

  association driversLicense [1] Driver (ownedBy) -- (license) License [1];

}
