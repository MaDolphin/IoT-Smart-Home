/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

// Ticket #532(fixed)

package testmodels.correct; // JOR CD2Alloy1_1

import java.util.Date;

/**

classes: 9
attributes: 6
interfaces: 0
associations: 6
enumeration values: 12
primitive and other types: 2

elements in total: 35

**/

classdiagram CD2Alloy1_OCL {
  
  enum ColorKind {black,red,white;}
  
  enum CarKind { sportsCar, van, limousine, regular;}
  
  enum InsuranceKind {workAccident, transport, international;}
  
  enum DrivingExperience {expert, beginner;}
  
  class Employee;
  
  class Driver extends Employee {
    DrivingExperience drivingExperience;
  }

  class Address;

  abstract class Vehicle {
    Date registrationDate;
    String licensePlate;
  }
  
  class Car extends Vehicle {
    ColorKind color;
    CarKind kind;
  }
  
  class Truck extends Vehicle;

  // maybe put singleton here later for refinement
  class Company {}
  
  class License {}
  
  class Insurance {
    InsuranceKind kind;
  }
  
  association driving [1] Driver (drivenBy) -- (drives) Vehicle [0..1];
  
  association workPlace [1] Employee (of) -> (worksIn) Address [1..3];
  
  association companiesCars [0..1] Company (of) -> (cars) Car [*];
  
  association companiessEmps [*] Company (of) -> (emps) Employee [*];
  
  composition employeeInsurances [1] Employee (of) -> (insurances) Insurance [1..*];
  
  association driversLicense [1] Driver (ownedBy) -- (license) License [0..1];
  
  
  // a company needs at least as many cars as drivers 

  OCL:[
    context Company c inv CompanyCarsAndDrivers: 
      c.cars.size() >= Set { e in c.emps |
                           typeif e instanceof Driver then true else false }.size();
  ]


  // drivers only drive the cars of their company 

  OCL:[
    // variant1: using isin and implies
    context Company c, Driver drv inv DriversCarsInCompany: 
      drv isin c.emps implies drv.drives isin c.cars; 
  ]

  OCL:[
  // variant2: using forall and isin
    context Company c inv: 
      forall emp in c.emps : 
        typeif emp instanceof Driver then 
            emp.drives isin c.cars 
          else 
            true; 
  ]
  
  // Van is driven by a driver with transport or international insurance 
  
  OCL:[
    context Car c inv: 
      c.kind == CarKind.van implies 
        (exists i in c.drivenBy.insurances : 
          i.kind == InsuranceKind.transport || 
          i.kind == InsuranceKind.international);  
  ]  

  OCL:[
    context Driver d inv:
      exists t in Truck : d.drives.contains(t) implies
      //why does the following alternative not parse?
      //(exists c in Car : d.drives.contains(c));
        (exists c in Car : c isin d.drives);
  ]
}
