/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

// Ticket #528(fixed), 529(fixed), 530

package testmodels.correct;  // CP BaseClasses

classdiagram BaseClasses {

  public class SerializableObject {
    private static final long serialVersionUID = 1L;
    private final int hashCode;

    public SerializableObject() {
      this.hashCode = new Object().hashCode();
    }

    public int hashCode() {
      return hashCode;
    }

    public boolean equals(java.lang.Object o) {
      if (this == o) {
        return true;
      }
      if (o instanceof SerializableObject) {
        SerializableObject other = (SerializableObject) o;
        return this.hashCode == other.hashCode();
      } else {
        return false;
      }
    }
  }

   <<mapped>>
   public abstract class BaseEntity implements IProvider /*, java.io.Serializable */{
     public final int hashCode() {
       final int prime = 31;
       int result = 1;
       result = prime * result + getObject().hashCode();
       return result;
     }
     
     public final boolean equals(Object obj) {
       if (this == obj) {
         return true;
       }
       if (obj == null) {
         return false;
       }
       if (getClass() != obj.getClass()) {
         return false;
       }
       return getObject().equals(((BaseEntity) obj).getObject());
     }
     
     public final boolean deepEqualsGeneral(Object obj) {
       if (obj == null) {
         return false;
       }
       if (getClass() != obj.getClass()) {
         return false;
       }
       return true;
     }
     
     <<transientPersistence>>
     public Object getObject() {
       if (object != null || object == null /* && getId() == null*/) {
         if (object == null) { //Avoid the performance impact of synchronized if we can
           synchronized (this) {
             if (object == null) {
               object = new SerializableObject();
             }
           }
         }
         return object;
       }
       // return getId();
       return null;
     }
   }
   
   
   <<transientPersistance, transient, volatile>>
   association BaseEntity -> (object) SerializableObject;

   public interface IProvider {}

}
