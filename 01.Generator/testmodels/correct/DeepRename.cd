/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package testmodels.correct; // ML

classdiagram DeepRename{

    <<entity>> public class A implements IFullQualifiedNameProvider,IPathProvider{
        public String name;
        public String path;
        public FullQualifiedName getFullQualifiedName() {
            return new FullQualifiedName(getPath(), getName());
        }
    }
    
    <<entity>> public class B implements IComposite{
        public String name;
        public String path;
        public FullQualifiedName getFullQualifiedName() {
            return new FullQualifiedName(getPath(), getName());
        }
    }
    
    public interface IComposite extends IComposite2 {}
    public interface IComposite2 extends IFullQualifiedNameProvider,IPathProvider {}
    
    association A -> B [1];
    
    <<entity>> public class C extends Superclass1 {
        public String name;
        public String path;
        public FullQualifiedName getFullQualifiedName() {
            return new FullQualifiedName(getPath(), getName());
        }
    }
    
    <<mapped>> public abstract class Superclass1 extends Superclass2 {}
    <<mapped>> public abstract class Superclass2 implements IFullQualifiedNameProvider,IPathProvider {
        public String name;
        public String path;
        public FullQualifiedName getFullQualifiedName() {
            return new FullQualifiedName(getPath(), getName());
        }
    }
    
    association B -> C [*];
    
    <<entity>> public class D{
    }
    
    association C -> D [1];
    
    public interface IProvider{}
    
    public interface IPathProvider extends IProvider{
      public String getPath();
      public void setPath(String path);
      
    }
    
    public interface IFullQualifiedNameProvider extends IProvider {
      public FullQualifiedName getFullQualifiedName();
    }
    
    <<embeddable>> public class FullQualifiedName {
      public String path;
      public String simpleName;
      public static final String PATH_SEPERATOR = ".";
      
      public FullQualifiedName(){
        super("testName");
      }
      
        public FullQualifiedName(String path, String simpleName) {
          super(path,simpleName);
        }
      public String toString() {
          if (path == null || path.equals("")) {
              return simpleName;
          }
          return path + FullQualifiedName.PATH_SEPERATOR + simpleName;
      }
    }
    
    
    
}
