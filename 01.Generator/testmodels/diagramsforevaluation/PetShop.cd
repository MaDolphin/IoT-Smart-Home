/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package testmodels.diagramsforevaluation;
import java.util.Date;

classdiagram PetShop{

  class Product{
    String name;
    String description;
  }

  class Item{
    long price;
    String quantity;
  }

  class Customer{
    String firstName;
    String lastName;
  }

  class Address{
    String line1;
    String line2;
    String city;
    String country;
  }

  class Cart{
    Date creationDate;
  }

  class Order{
    String reference;
    String date;
    OrderStatus status;
  }

  class Food extends Product;

  class Toy extends Product;

  enum OrderStatus{
    preparation,
    expedition;
  }

  association art_Customer [1] Customer (customer) <-> (carts) Cart [1] ;

  association tem_Product [1] Product (product) <- (product) Item [1] ;

  association rder_Item [1] Item (items) <- (item) Order [1] ;

  association art_Order [1] Order (order) <-> (cart) Cart [1] ;

  association rder_Address [1] Address (paymentAddress) <- (address) Order [1] ;

  association rder_Address [1] Address (deliveryAddress) <- (address) Order [1] ;

  association rder_Customer [1] Customer (customer) <-> (orders) Order [1] ;

  association art_Item [1] Item (items) <- (item) Cart [1] ;

  association ustomer_Address [1] Address (address) <- (address) Customer [1] ;

}
