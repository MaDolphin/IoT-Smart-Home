/* (c) https://github.com/MontiCore/monticore */

package extendedsocnet;

import java.util.List;
import java.util.Set;
import java.util.Date;

// DO NOT CHANGE THIS MODEL
classdiagram XSocNet {

  // classes and associations ...

  /********************************************
   * Profiles, Persons, Groups
   * There are two types of Profiles: Persons and Groups
  *********************************************/

  abstract class Profile {
    String profileName;
    /int numOfPosts;
    /int friends;
  }
  
  // The individual Person participating in SocNet
  class Person extends Profile {
    // attributes ...
    Date lastVisit;
    String firstName;
    String secondName;
    Date dateOfBirth;
    int zip;
    String city;
    String country;
  }
  

  
  
  // People may form Groups around purposes
  class Group extends Profile {
    boolean isOpen;
    Date created;
    String purpose;
    /int members;
  }

  // A Group has members
  association member [*] Person <-> Group [*];

  /********************************************
   * Relationships
   * Persons and Groups can be related:
   * Relationships are binary and have an initiator as well as an
   * invited Person/Group
  *********************************************/

  // Each Relationship connects two Profiles
  class Relationship {
    boolean isPending;
    Date requested;
    Date accepted;
  }

  

  association doctor Relationship -> Tag[*];
  association worker Relationship -> Tag[0..1];
  association lunch [0..1] Photo <-> Tag [0..1];
  association car [0..1] Photo <-> Tag [*];
  association paper [*] Photo <-> Tag [*];
  association [0..1] Tag (house) <-> (occupants) Tag [*];
  association [0..1] Tag (boyfriend) <-> (girlfriend) Tag [0..1];
  association Tag -> (apple) Tag [0..1];
  association Tag -> (orange) Tag [*];
  /********************************************
   * Posts
   * our Social Network has posts of several kinds
  *********************************************/

  // The generic interface
  interface Post;

  // Each Post has one sender and multiple receivers:
  association received [*] Profile <-> Post [*] <<ordered>>;
  association sent [1] Profile <-> Post [*] <<ordered>>;


  // InstantMessages are special forms of posts
  class InstantMessage implements Post {
    Date timestamp;
    String content;
  }

  // A message can be followed up by another.
  // Threading is supported
  association [*] InstantMessage <-> (replyTo) InstantMessage [0..1];


  //PhotoMessages are special InstantMessages
  class PhotoMessage extends InstantMessage;

  /********************************************
   * Photos and Tags
   * we do have Photos with a size (but no content :-) )
   * and people can be tagged on Photos
  *********************************************/

  class Photo {
    double height;
    double width;
  }

  // everybody can tag a Person found on a Photo,
  // but the tagged Person has to confirm it
  class Tag {
    boolean confirmed;
  }
}
